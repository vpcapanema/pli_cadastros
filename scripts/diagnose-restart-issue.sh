#!/bin/bash
# Script de Diagn√≥stico Completo - Reinicializa√ß√µes VS Code
# Identifica todas as poss√≠veis causas de restart autom√°tico

echo "üîç DIAGN√ìSTICO COMPLETO - REINICIALIZA√á√ïES VS CODE"
echo "================================================="
echo "Data: $(date)"
echo ""

# 1. Verificar processos Node.js ativos
echo "1Ô∏è‚É£ VERIFICANDO PROCESSOS NODE.JS..."
echo "-----------------------------------"

# Usar comando Windows nativo
if command -v tasklist &> /dev/null; then
    echo "Processos Node.js encontrados:"
    tasklist //FI "IMAGENAME eq node.exe" //FO CSV | grep -v "INFO:" | head -10
else
    echo "‚ö†Ô∏è Comando tasklist n√£o dispon√≠vel"
fi

echo ""

# 2. Verificar PM2
echo "2Ô∏è‚É£ VERIFICANDO PM2..."
echo "--------------------"

if command -v pm2 &> /dev/null; then
    echo "Status PM2:"
    pm2 status 2>/dev/null || echo "‚ùå PM2 n√£o est√° gerenciando nenhuma aplica√ß√£o"
    echo ""
    
    echo "Lista de processos PM2:"
    pm2 list 2>/dev/null || echo "‚ùå Nenhum processo PM2 ativo"
else
    echo "‚ùå PM2 n√£o est√° instalado ou n√£o est√° no PATH"
fi

echo ""

# 3. Verificar configura√ß√µes VS Code problem√°ticas
echo "3Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES VS CODE..."
echo "---------------------------------------"

SETTINGS_FILE=".vscode/settings.json"
if [ -f "$SETTINGS_FILE" ]; then
    echo "‚úÖ Arquivo de configura√ß√µes encontrado"
    
    # Verificar configura√ß√µes problem√°ticas
    echo "Verificando configura√ß√µes que podem causar reloads:"
    
    if grep -q '"files.autoSave".*"afterDelay"' "$SETTINGS_FILE"; then
        echo "‚ö†Ô∏è Auto-save com afterDelay pode causar reloads frequentes"
    fi
    
    if grep -q '"typescript.updateImportsOnFileMove".*"always"' "$SETTINGS_FILE"; then
        echo "‚ö†Ô∏è Auto-update de imports TypeScript ativo"
    fi
    
    if grep -q '"javascript.updateImportsOnFileMove".*"always"' "$SETTINGS_FILE"; then
        echo "‚ö†Ô∏è Auto-update de imports JavaScript ativo"
    fi
    
    if grep -q '"editor.formatOnSave".*true' "$SETTINGS_FILE"; then
        echo "‚ö†Ô∏è Format on save ativo - pode causar loops"
    fi
    
    if grep -q '"extensions.autoUpdate".*true' "$SETTINGS_FILE"; then
        echo "‚ö†Ô∏è Auto-update de extens√µes ativo"
    fi
    
    echo "‚úÖ Configura√ß√µes preventivas aplicadas"
else
    echo "‚ùå Arquivo de configura√ß√µes n√£o encontrado"
fi

echo ""

# 4. Verificar extens√µes problem√°ticas
echo "4Ô∏è‚É£ VERIFICANDO EXTENS√ïES PROBLEM√ÅTICAS..."
echo "-----------------------------------------"

# Lista de extens√µes que podem causar problemas
PROBLEMATIC_EXTENSIONS=(
    "auto-reload"
    "live-server" 
    "browser-sync"
    "nodemon"
    "auto-refresh"
    "hot-reload"
    "restart"
    "refresh"
)

if command -v code &> /dev/null; then
    echo "Verificando extens√µes instaladas..."
    EXTENSIONS=$(code --list-extensions 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        for ext in "${PROBLEMATIC_EXTENSIONS[@]}"; do
            if echo "$EXTENSIONS" | grep -i "$ext" > /dev/null; then
                echo "‚ö†Ô∏è Extens√£o problem√°tica encontrada: $ext"
            fi
        done
        
        # Verificar algumas extens√µes espec√≠ficas conhecidas por causar problemas
        if echo "$EXTENSIONS" | grep -i "live.*server" > /dev/null; then
            echo "‚ö†Ô∏è Live Server detectado - pode causar reloads autom√°ticos"
        fi
        
        if echo "$EXTENSIONS" | grep -i "auto.*save" > /dev/null; then
            echo "‚ö†Ô∏è Extens√£o de auto-save detectada"
        fi
        
        echo "Total de extens√µes: $(echo "$EXTENSIONS" | wc -l)"
    else
        echo "‚ùå N√£o foi poss√≠vel listar extens√µes"
    fi
else
    echo "‚ùå Comando 'code' n√£o dispon√≠vel"
fi

echo ""

# 5. Verificar logs de erro recentes
echo "5Ô∏è‚É£ VERIFICANDO LOGS DE ERRO..."
echo "------------------------------"

LOG_FILES=(
    "./logs/err.log"
    "./logs/combined.log"
    "./logs/out.log"
)

for log_file in "${LOG_FILES[@]}"; do
    if [ -f "$log_file" ]; then
        echo "üìã Verificando $log_file:"
        
        # Verificar erros recentes (√∫ltimas 20 linhas)
        ERROR_COUNT=$(tail -20 "$log_file" 2>/dev/null | grep -ci "error\|crash\|fatal\|exception" || echo "0")
        
        if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "üö® $ERROR_COUNT erros encontrados em $log_file"
            echo "√öltimos erros:"
            tail -20 "$log_file" | grep -i "error\|crash\|fatal\|exception" | tail -3
        else
            echo "‚úÖ Nenhum erro cr√≠tico em $log_file"
        fi
    else
        echo "‚ÑπÔ∏è Arquivo $log_file n√£o encontrado"
    fi
done

echo ""

# 6. Verificar uso de mem√≥ria
echo "6Ô∏è‚É£ VERIFICANDO USO DE MEM√ìRIA..."
echo "--------------------------------"

if command -v node &> /dev/null; then
    echo "Verificando mem√≥ria do sistema..."
    node -e "
        const os = require('os');
        const totalMem = os.totalmem();
        const freeMem = os.freemem();
        const usedMem = totalMem - freeMem;
        
        console.log('Total:', Math.round(totalMem/1024/1024/1024*100)/100, 'GB');
        console.log('Livre:', Math.round(freeMem/1024/1024/1024*100)/100, 'GB');
        console.log('Usado:', Math.round(usedMem/1024/1024/1024*100)/100, 'GB');
        console.log('% Usado:', Math.round((usedMem/totalMem)*100), '%');
        
        if ((usedMem/totalMem) > 0.85) {
            console.log('‚ö†Ô∏è Alto uso de mem√≥ria detectado!');
        } else {
            console.log('‚úÖ Uso de mem√≥ria normal');
        }
    "
else
    echo "‚ùå Node.js n√£o dispon√≠vel para verifica√ß√£o de mem√≥ria"
fi

echo ""

# 7. Verificar configura√ß√£o PM2 vs processos diretos
echo "7Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ÉO PM2..."
echo "----------------------------------"

if [ -f "ecosystem.config.js" ]; then
    echo "‚úÖ Arquivo ecosystem.config.js encontrado"
    
    # Verificar configura√ß√µes que podem causar restart
    if grep -q '"watch".*true' "ecosystem.config.js"; then
        echo "‚ö†Ô∏è Watch mode ativo no PM2 - pode causar restarts autom√°ticos"
    fi
    
    MEMORY_LIMIT=$(grep -o '"max_memory_restart".*' "ecosystem.config.js" | head -1)
    if [ ! -z "$MEMORY_LIMIT" ]; then
        echo "üìä Limite de mem√≥ria PM2: $MEMORY_LIMIT"
    fi
    
    MAX_RESTARTS=$(grep -o '"max_restarts".*' "ecosystem.config.js" | head -1)
    if [ ! -z "$MAX_RESTARTS" ]; then
        echo "üîÑ M√°ximo de restarts: $MAX_RESTARTS"
    fi
else
    echo "‚ùå Arquivo ecosystem.config.js n√£o encontrado"
fi

echo ""

# 8. Verificar se h√° m√∫ltiplos processos Node.js conflitantes
echo "8Ô∏è‚É£ VERIFICANDO CONFLITOS DE PROCESSOS..."
echo "----------------------------------------"

# Tentar identificar processos Node.js usando netstat (se dispon√≠vel)
if command -v netstat &> /dev/null; then
    echo "Verificando portas em uso:"
    netstat -an | grep ":3000\|:8080\|:5000" | head -5
fi

# Verificar se server.js est√° rodando diretamente (fora do PM2)
if pgrep -f "node.*server.js" > /dev/null; then
    echo "‚ö†Ô∏è Processo server.js detectado rodando diretamente (fora do PM2)"
    echo "Isso pode causar conflitos e restarts!"
fi

echo ""

# 9. Gerar recomenda√ß√µes
echo "9Ô∏è‚É£ RECOMENDA√á√ïES BASEADAS NO DIAGN√ìSTICO..."
echo "-------------------------------------------"

echo "üõ†Ô∏è A√á√ïES RECOMENDADAS:"
echo ""

echo "1. ‚ö†Ô∏è PROBLEMA PRINCIPAL IDENTIFICADO:"
echo "   - PM2 n√£o est√° gerenciando a aplica√ß√£o"
echo "   - Processos Node.js rodando diretamente"
echo "   - Isso causa instabilidade e restarts inesperados"
echo ""

echo "2. üöÄ SOLU√á√ïES IMEDIATAS:"
echo "   a) Parar todos os processos Node.js:"
echo "      taskkill /F /IM node.exe"
echo ""
echo "   b) Iniciar com PM2:"
echo "      pm2 start ecosystem.config.js"
echo "      pm2 save"
echo ""
echo "   c) Verificar status:"
echo "      pm2 status"
echo "      pm2 monit"
echo ""

echo "3. üîß CONFIGURA√á√ïES PREVENTIVAS J√Å APLICADAS:"
echo "   - Auto-save otimizado"
echo "   - Auto-update de imports desabilitado"
echo "   - Format on save desabilitado"
echo "   - Watchers otimizados"
echo ""

echo "4. üìä MONITORAMENTO:"
echo "   - Use: node tools/memory-monitor.js"
echo "   - PM2 logs: pm2 logs pli-cadastros"
echo ""

echo "‚úÖ DIAGN√ìSTICO CONCLU√çDO!"
echo "========================="
echo ""
echo "üí° PR√ìXIMO PASSO: Execute os comandos da se√ß√£o 2 para resolver o problema."
