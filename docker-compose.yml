# PLI Cadastros - Docker Compose
# =============================

version: '3.8'

services:
  # Aplicação PLI Cadastros
  app:
    build: .
    container_name: pli-cadastros-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=pli_cadastros
      - DB_USER=postgres
      - DB_PASSWORD=pli123456
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./public/uploads:/app/public/uploads
    networks:
      - pli-network
    restart: unless-stopped

  # Banco PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pli-cadastros-db
    environment:
      - POSTGRES_DB=pli_cadastros
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=pli123456
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pli-network
    restart: unless-stopped

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: pli-cadastros-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pli-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: pli-cadastros-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html/public
    depends_on:
      - app
    networks:
      - pli-network
    restart: unless-stopped

  # Adminer para gerenciamento do banco
  adminer:
    image: adminer:latest
    container_name: pli-cadastros-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - pli-network
    restart: unless-stopped

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Rede personalizada
networks:
  pli-network:
    driver: bridge
